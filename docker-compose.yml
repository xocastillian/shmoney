services:
  postgres:
    image: postgres:16.3-alpine
    container_name: shmoney-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Europe/Moscow
    ports:
      - "127.0.0.1:${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
    image: shmoney:latest
    container_name: shmoney-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

      JWT_SECRET: ${JWT_SECRET}
      EXCHANGE_RATE_API_KEY: ${EXCHANGE_RATE_API_KEY}
      EXCHANGE_RATE_BASE_URL: ${EXCHANGE_RATE_BASE_URL}

      TELEGRAM_ENABLED: ${TELEGRAM_ENABLED}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}

      SECURITY_COOKIES_SAME_SITE: ${SECURITY_COOKIES_SAME_SITE}
      SECURITY_COOKIES_SECURE: ${SECURITY_COOKIES_SECURE}
      SECURITY_COOKIES_DOMAIN: ${SECURITY_COOKIES_DOMAIN}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    ports:
      - "127.0.0.1:8080:8080"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  nginx:
    image: nginx:1.27-alpine
    container_name: shmoney-nginx
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    environment:
      API_DOMAIN: ${API_DOMAIN}
      FRONT_DOMAIN: ${FRONT_DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/templates:/etc/nginx/templates:ro
      - ./web-dist:/usr/share/nginx/html:ro
      - certbot-webroot:/var/www/certbot
      - letsencrypt:/etc/letsencrypt

  # Dev-only helper to bootstrap a self-signed cert into the shared volume
  gen-selfsigned:
    image: alpine:3.20
    profiles: ["dev"]
    depends_on: []
    volumes:
      - letsencrypt:/etc/letsencrypt
    entrypoint: ["/bin/sh","-c"]
    command: >
      "set -e; \
       if [ -z \"${API_DOMAIN}\" ]; then echo 'API_DOMAIN not set'; exit 1; fi; \
       if [ -f /etc/letsencrypt/live/${API_DOMAIN}/fullchain.pem ] && [ -f /etc/letsencrypt/live/${API_DOMAIN}/privkey.pem ]; then \
         echo 'Certs already exist, skipping'; exit 0; \
       fi; \
       echo 'Installing openssl and generating self-signed cert...'; \
       apk add --no-cache openssl >/dev/null && \
       mkdir -p /etc/letsencrypt/live/${API_DOMAIN} && \
       openssl req -x509 -nodes -newkey rsa:2048 -days 5 -sha256 -batch \
         -keyout /etc/letsencrypt/live/${API_DOMAIN}/privkey.pem \
         -out /etc/letsencrypt/live/${API_DOMAIN}/fullchain.pem \
         -subj "/C=RU/ST=./L=./O=Local Dev/CN=${API_DOMAIN}" \
         -addext "subjectAltName=DNS:${API_DOMAIN}" && \
       echo 'Self-signed cert generated.'"

  certbot:
    image: certbot/certbot:latest
    container_name: shmoney-certbot
    profiles: ["cert"]
    volumes:
      - certbot-webroot:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    entrypoint: ["/bin/sh","-c"]
    command: >
      "if [ -z \"${API_DOMAIN}\" ] || [ -z \"${LETSENCRYPT_EMAIL}\" ]; then
         echo 'Set API_DOMAIN and LETSENCRYPT_EMAIL in .env before requesting a certificate' && exit 1;
       fi && 
       DOMAINS="-d ${API_DOMAIN}" && \
       if [ -n \"${FRONT_DOMAIN}\" ]; then DOMAINS=\"$DOMAINS -d ${FRONT_DOMAIN}\"; fi && \
       certbot certonly --webroot -w /var/www/certbot $DOMAINS --email ${LETSENCRYPT_EMAIL} --agree-tos --no-eff-email"

  # Simple, non-interactive self-signed cert generator for local dev
  gencert:
    image: alpine:3.20
    profiles: ["dev"]
    environment:
      API_DOMAIN: ${API_DOMAIN}
    volumes:
      - letsencrypt:/etc/letsencrypt
    entrypoint: ["/bin/sh","-c"]
    command: |
      set -e
      if [ -z "${API_DOMAIN}" ]; then echo 'API_DOMAIN not set'; exit 1; fi
      echo "Generating self-signed cert for ${API_DOMAIN}..."
      apk add --no-cache openssl >/dev/null
      mkdir -p "/etc/letsencrypt/live/${API_DOMAIN}"
      openssl req -x509 -nodes -newkey rsa:2048 -days 5 -sha256 -batch \
        -subj "/CN=${API_DOMAIN}" \
        -keyout "/etc/letsencrypt/live/${API_DOMAIN}/privkey.pem" \
        -out "/etc/letsencrypt/live/${API_DOMAIN}/fullchain.pem"
      echo 'Self-signed cert generated.'

volumes:
  postgres-data:
  certbot-webroot:
  letsencrypt:
